#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <iomanip>

using namespace std;

const string ClientsFileName = "Clients.txt";

struct sClient {
    
    string AccountNumber;
    string PinCode;
    string Name;
    string Phone;
    double AccountBalance;
    bool MarkForDelete = false;
};

vector<string> SplitString(string S1, string Delim) {
    vector<string> vString;
    size_t pos = 0;
    string sWord;
    
    while ((pos = S1.find(Delim)) != std::string::npos) {
        sWord = S1.substr(0, pos);
        
        if (sWord != "") {
            vString.push_back(sWord);
        }
        
        S1.erase(0, pos + Delim.length());
    }
    
    if (S1 != "") {
        vString.push_back(S1);
    }
    
    return vString;
}

sClient ConvertLineToRecord(string Line, string Seperator = "#//#")
{
    sClient Client;
    vector<string> vClientData;
    vClientData = SplitString(Line, Seperator);
    
    Client.AccountNumber = vClientData[0];
    Client.PinCode = vClientData[1];
    Client.Name = vClientData[2];
    Client.Phone = vClientData[3];
    Client.AccountBalance = stod(vClientData[4]);
    
    return Client;
}

string ConvertRecordToLine(sClient Client, string Seperator = "#//#") 
{
    string stClientRecord = "";
    stClientRecord += Client.AccountNumber + Seperator;
    stClientRecord += Client.PinCode + Seperator;
    stClientRecord += Client.Name + Seperator;
    stClientRecord += Client.Phone + Seperator;
    stClientRecord += to_string(Client.AccountBalance);
    
    return stClientRecord;
}

bool ClientExistsByAccountNumber(string AccountNumber, string FileName) {
    vector<sClient> vClients;
    fstream MyFile;
    
    MyFile.open(FileName, ios::in); //read mode
    if (MyFile.is_open())
    {
        string Line;
        sClient Client;
        while (getline(MyFile, Line)) 
        {
            Client = ConvertLineToRecord(Line);
            if (Client.AccountNumber == AccountNumber)
            {
                MyFile.close();
                return true;
            }
            vClients.push_back(Client);
        }
        MyFile.close();
    }
    return false;
}

sClient ReadNewClient()
{
    sClient Client;
    cout << "Enter Account Number? ";
    
    getline(cin >> ws, Client.AccountNumber);
    // Usage of std::ws will extract allthe whitespace character 
    
    while (ClientExistsByAccountNumber(Client.AccountNumber, ClientsFileName)) 
    {
        cout << "\nClient with [" << Client.AccountNumber << "] already exists, Enter another Account Number? ";
        getline(cin >> ws, Client.AccountNumber);
    }
    
    cout << "Enter PinCode? ";
    getline(cin, Client.PinCode);
    
    cout << "Enter Name? ";
    getline(cin, Client.Name);
    
    cout << "Enter Phone? ";
    getline(cin, Client.Phone);
    
    cout << "Enter AccountBalance? ";
    cin >> Client.AccountBalance;
    
    return Client;
}

vector<sClient> LoadClientsDataFromFile(string FileName)
{
    vector<sClient> vClients;
    fstream MyFile;
    MyFile.open(FileName, ios::in);
    
    if (MyFile.is_open()) 
    {
        string Line;
        sClient Client;
        
        while (getline(MyFile, Line)) 
        {
            Client = ConvertLineToRecord(Line);
            vClients.push_back(Client);
        }
        
        MyFile.close();
    }
    
    return vClients;
}

void PrintClientRecordLine(sClient Client)
{
    cout << "| " << setw(15) << left << Client.AccountNumber;
    cout << "| " << setw(10) << left << Client.PinCode;
    cout << "| " << setw(40) << left << Client.Name;
    cout << "| " << setw(12) << left << Client.Phone;
    cout << "| " << setw(12) << left << Client.AccountBalance;
}

void ShowAllClientsScreen() 
{
   
    vector<sClient> vClients = LoadClientsDataFromFile(ClientsFileName);
    
    cout << "\n\t\t\t\t\tClient List (" << vClients.size() << ") Client(s).";
   
    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;
    cout << "| " << left << setw(15) << "Account Number";
    cout << "| " << left << setw(10) << "Pin Code";
    cout << "| " << left << setw(40) << "Client Name";
    cout << "| " << left << setw(12) << "Phone";
    cout << "| " << left << setw(12) << "Balance";
    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;
  
    if (vClients.size() == 0)
        cout << "\t\t\t\tNo Clients Available In the System!";
    else
        for (sClient Client : vClients) {
            PrintClientRecordLine(Client);
            cout << endl;
        }
    cout << "\n_______________________________________________________";
    cout << "_________________________________________\n" << endl;
}

void PrintClientCard(sClient Client) 
{
    cout << "\nThe following are the client details:\n";
    cout << "-----------------------------------";
    cout << "\nAccount Number: " << Client.AccountNumber;
    cout << "\nPin Code     : " << Client.PinCode;
    cout << "\nName         : " << Client.Name;
    cout << "\nPhone        : " << Client.Phone;
    cout << "\nAccount Balance: " << Client.AccountBalance;
    cout << "\n-----------------------------------\n";
}

bool FindClientByAccountNumber(string AccountNumber, vector<sClient> vClients, sClient &Client) {
    for (sClient C : vClients)
    {
        if (C.AccountNumber == AccountNumber) {
            Client = C;
            return true;
        }
    }
    return false;
}

sClient ChangeClientRecord(string AccountNumber) 
{
    sClient Client;
    Client.AccountNumber = AccountNumber;
    
    cout << "\n\nEnter PinCode? ";
    getline(cin >> ws, Client.PinCode);
    cout << "Enter Name? ";
    getline(cin, Client.Name);
    cout << "Enter Phone? ";
    getline(cin, Client.Phone);
    cout << "Enter AccountBalance? ";
    cin >> Client.AccountBalance;
    return Client;
}

bool MarkClientForDeleteByAccountNumber(string AccountNumber, vector<sClient>& vClients)
{
    for (sClient &C : vClients)
    {
        if (C.AccountNumber == AccountNumber) {
            C.MarkForDelete = true;
            return true;
        }
    }
    return false;
}

vector<sClient> SaveClientsDataToFile(string FileName, vector<sClient> vClients) {
    fstream MyFile;
    MyFile.open(FileName, ios::out);
    string DataLine;
    if (MyFile.is_open()) {
        for (sClient C : vClients) {
            if (C.MarkForDelete == false) {
                DataLine = ConvertRecordToLine(C);
                MyFile << DataLine << endl;
            }
        }
        MyFile.close();
    }
    return vClients;
}

void AddDataLineToFile(string FileName, string stDataLine) 
{
    fstream MyFile;
    MyFile.open(FileName, ios::out | ios::app);
    if (MyFile.is_open()) {
        MyFile << stDataLine << endl;
        MyFile.close();
    }
}

void AddNewClient() 
{
    sClient Client;
    Client = ReadNewClient();
    AddDataLineToFile(ClientsFileName, ConvertRecordToLine(Client));
}

void AddNewClients() {
    char AddMore = 'Y';
    do {
        cout << "Adding New Client:\n\n";
        AddNewClient();
        
        cout << "\nClient Added Successfully, do you want to add more clients? Y/N? ";
        cin >> AddMore;
        
    } while (toupper(AddMore) == 'Y');
    
}

void showlist()
{
    int n;
    vector<sClient> vClients;
    
    cout << "==========================================================\n";
    cout << "                      Main menu screen                     \n";
    cout << "==========================================================\n";
    cout << "[1] Show client list.\n";
    cout << "[2] Add new client.\n";
    cout << "[3] Delete client.\n";
    cout << "[4] Update client.\n";
    cout << "[5] Find client.\n";
    cout << "[6] Exit.\n";
    cout << "==========================================================\n";
    cout << "Choose what you want to do [1 to 6]: ";
    cin >> n;
    
    switch(n)
    {
        case 1:
            ShowAllClientsScreen();
            break;
        case 2:
            AddNewClients();
            break;
        case 3:
            {
                string accountNumber;
                cout << "Enter the account number of the client you want to delete: ";
                cin >> accountNumber;
                if (MarkClientForDeleteByAccountNumber(accountNumber, vClients)) {
                    cout << "Client with account number " << accountNumber << " deleted.\n";
                } else {
                    cout << "Client with account number " << accountNumber << " not found.\n";
                }
            }
            break;
        case 4:
            {
                string accountNumber;
                cout << "Enter the account number of the client you want to update: ";
                cin >> accountNumber;
                if (MarkClientForDeleteByAccountNumber(accountNumber, vClients)) {
                    sClient updatedClient = ChangeClientRecord(accountNumber);
                    vClients.push_back(updatedClient);
                    cout << "Client with account number " << accountNumber << " updated.\n";
                } else {
                    cout << "Client with account number " << accountNumber << " not found.\n";
                }
            }
            break;
        case 5:
            {
                string accountNumber;
                cout << "Enter the account number of the client you want to find: ";
                cin >> accountNumber;
                sClient client;
                if (FindClientByAccountNumber(accountNumber, vClients, client)) {
                    PrintClientCard(client);
                } else {
                    cout << "Client with account number " << accountNumber << " not found.\n";
                }
            }
            break;
        case 6:
            cout << "Exiting program...\n";
            break;
        default:
            cout << "Invalid choice. Please choose a number between 1 and 6.\n";
            break;
    }
}

int main()
{
    
 showlist();
    return 0;
}
